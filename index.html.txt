
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MATSYA ERP - Gestion des Stocks</title>
    
    <!-- PWA Manifest -->
    <link rel="manifest" href="./manifest.json">
    <meta name="theme-color" content="#2563eb">
    
    <!-- PWA Meta tags -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="MATSYA ERP">
    <link rel="apple-touch-icon" href="./icon-192.png">
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="./icon-192.png">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- React & ReactDOM -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    
    <!-- Babel for JSX -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
        }
        
        .offline-indicator {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #f59e0b;
            color: white;
            text-align: center;
            padding: 8px;
            z-index: 1000;
            display: none;
        }
        
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #f3f4f6;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }
        
        .install-prompt {
            position: fixed;
            bottom: 20px;
            left: 20px;
            right: 20px;
            background: #2563eb;
            color: white;
            padding: 16px;
            border-radius: 8px;
            display: none;
            z-index: 1000;
        }
        
        @media (max-width: 768px) {
            .nav-container {
                overflow-x: auto;
                white-space: nowrap;
            }
        }
    </style>
</head>
<body>
    <!-- Offline Indicator -->
    <div id="offline-indicator" class="offline-indicator">
       ‚ö†Ô∏è Mode hors ligne - Certaines fonctionnalit√©s peuvent √™tre limit√©es
    </div>
    
    <!-- Install Prompt -->
    <div id="install-prompt" class="install-prompt">
        <div class="flex justify-between items-center">
            <div>
                <strong>üì± Installer MATSYA ERP</strong>
                <p class="text-sm mt-1">Installez l'application pour un acc√®s rapide</p>
            </div>
            <div class="flex gap-2">
                <button id="install-button" class="bg-white text-blue-600 px-3 py-1 rounded text-sm font-medium">
                    Installer
                </button>
                <button id="dismiss-install" class="text-blue-200 text-sm">
                    Plus tard
                </button>
            </div>
        </div>
    </div>
    
    <!-- Loading Screen -->
    <div id="loading-screen" class="loading-screen">
        <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-600">Chargement MATSYA ERP...</p>
        </div>
    </div>
    
    <!-- Main App Container -->
    <div id="root"></div>
    
    <!-- App Script -->
    <script type="text/babel" src="./app.js"></script>
    
    <script>
        // PWA Installation
        let deferredPrompt;
        const installPrompt = document.getElementById('install-prompt');
        const installButton = document.getElementById('install-button');
        const dismissInstall = document.getElementById('dismiss-install');
        
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            installPrompt.style.display = 'block';
        });
        
        installButton.addEventListener('click', async () => {
            if (deferredPrompt) {
                deferredPrompt.prompt();
                const { outcome } = await deferredPrompt.userChoice;
                if (outcome === 'accepted') {
                    console.log('PWA installed');
                }
                deferredPrompt = null;
                installPrompt.style.display = 'none';
            }
        });
        
        dismissInstall.addEventListener('click', () => {
            installPrompt.style.display = 'none';
            localStorage.setItem('install-dismissed', 'true');
        });
        
        if (localStorage.getItem('install-dismissed')) {
            installPrompt.style.display = 'none';
        }
        
        // Offline/Online status
        const offlineIndicator = document.getElementById('offline-indicator');
        
        window.addEventListener('online', () => {
            offlineIndicator.style.display = 'none';
        });
        
        window.addEventListener('offline', () => {
            offlineIndicator.style.display = 'block';
        });
        
        // Register Service Worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('./sw.js')
                    .then((registration) => {
                        console.log('SW registered: ', registration);
                    })
                    .catch((registrationError) => {
                        console.log('SW registration failed: ', registrationError);
                    });
            });
        }
        
        // Hide loading screen when React app loads
        window.addEventListener('load', () => {
            setTimeout(() => {
                const loadingScreen = document.getElementById('loading-screen');
                if (loadingScreen) {
                    loadingScreen.style.display = 'none';
                }
            }, 1000);
        });
        
        // Backup/Restore functionality
        window.exportData = () => {
            const data = {
                components: JSON.parse(localStorage.getItem('matsya-components') || '[]'),
                movements: JSON.parse(localStorage.getItem('matsya-movements') || '[]'),
                suppliers: JSON.parse(localStorage.getItem('matsya-suppliers') || '[]'),
                exportDate: new Date().toISOString(),
                version: '2.0'
            };
            
            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `matsya-erp-backup-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        };
        
        window.importData = (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const data = JSON.parse(e.target.result);
                        if (data.components) localStorage.setItem('matsya-components', JSON.stringify(data.components));
                        if (data.movements) localStorage.setItem('matsya-movements', JSON.stringify(data.movements));
                        if (data.suppliers) localStorage.setItem('matsya-suppliers', JSON.stringify(data.suppliers));
                        alert('Donn√©es import√©es avec succ√®s! Rechargez la page.');
                        window.location.reload();
                    } catch (error) {
                        alert('Erreur lors de l\'importation: ' + error.message);
                    }
                };
                reader.readAsText(file);
            }
        };
    </script>
</body>
</html>